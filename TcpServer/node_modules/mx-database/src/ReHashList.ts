import { error } from './TeMongodb';
import { Util } from "../lib/Util"
import MONGO from "mongodb"
import { ReHash } from './ReHash';

export class ReHashList<T> {
    private fobj: Object = {};
    private _collection_: MONGO.Collection;
    private _data_: ReHash<T>[] = [];
    constructor(parent: MONGO.Collection, fobj: Object) {
        this.fobj = fobj;
        this._collection_ = parent;
    }

    get findKey() {
        return this.fobj;
    }

    get data() {
        return this._data_ as ReHash<T>[];
    }

    /**插入数据单元 */
    push_back(v: ReHash<T>) {
        v = Util.attach(v, this.findKey);
        this._data_.push(v);
    }

    /**插入数据 如果不存在那么新建 如果存在那么更新老数据 */
    async push_insert(v: T) {
        if ((v as any)._id) {
            let un = new ReHash(this._collection_, { _id: (v as any)._id }, undefined, undefined);
            await un.load();
            if (un.empty) {
                un.insert(v);
            }
            else {
                for (let key in v) {
                    un.set(key, v[key])
                }
            }
        }
        else {
            let un = new ReHash(this._collection_, v, undefined, undefined);
            await un.load();
            if (un.empty) {
                un.insert(v);
            }
            else {
                for (let key in v) {
                    un.set(key, v[key])
                }
            }
        }
    }

    private _start = 0;
    private _limit = 0;
    limit(num: number) {
        this._limit = num;
        return this;
    }
    skip(num: number) {
        this._start = num;
        return this;
    }
    /**
     * @description 加载列表数据
     * @date 2020-03-25
     * @param {*} [filter] 筛选的字段
     * @param {*} [sort] 排序的字段
     * @returns 返回查询对象
     * @memberof ReHashList
     */
    async load(filter?: any, sort?: any) {
        if (filter && typeof filter == "boolean") {
            filter = sort;
            sort = undefined
        }

        let _cc_ = this._collection_.find(this.findKey, { projection: filter, skip: this._start, sort: sort });
        let _this = this;
        return new Promise<ReHashList<T>>(function (resolve, reject) {
            function batchFind() {
                _cc_ && _cc_.next((err: any, result: any) => {
                    if (err) {
                        error('db load error batchFind', JSON.stringify(err, null, 4));
                        reject(err);
                    }
                    else {
                        if (result == null) {
                            process.nextTick(resolve, _this);
                        }
                        else {
                            let sh = new ReHash<T>(_this._collection_, { _id: result._id }, undefined, undefined)
                            sh.setObjectID({ _id: result._id }, result)
                            sh.force_ok()
                            _this._data_.push(sh);
                            if (_this._limit && _this._data_.length >= _this._limit) {
                                process.nextTick(resolve, _this);
                            }
                            else {
                                process.nextTick(batchFind);
                            }
                        }
                    }
                });
            }
            process.nextTick(batchFind);
        });
    }

    get length() {
        return this._data_.length;
    }

    get_at(index: number) {
        if (index < 0 || index >= this._data_.length)
            return null;
        return this._data_[index];
    }

    rm_at(index: number) {
        let un = this.get_at(index);
        if (un) {
            this._data_.splice(index, 1)
            un.remove()
        }
    }

    clear_all() {
        while (this.length > 0) {
            this.rm_at(0);
        }
    }
}
