"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Util_1 = require("../lib/Util");
const Time_1 = require("../lib/Time");
const HttpQuest_1 = require("../lib/HttpQuest");
// 这个是提供给特殊情况下的tga使用的，在聚石塔的容器服务中部署，日志记录不能以本地文件的形式落地，这样收集会很复杂，这里提供一个中转接收落地的策略
class TGALoggerNet {
    constructor(cfg) {
        this._catch = new Util_1.HashMap();
        this.path = "";
        this.size = 300;
        this.name = "tga";
        this.path = cfg.path;
        if (!this.path)
            console.error("path is empty");
        if (cfg.size) {
            this.size = cfg.size;
        }
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.handle)
                this.handle.stop();
            this.handle = Util_1.Util.setInterval(this.update.bind(this), 2000);
            return true;
        });
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.path) {
                this._catch.clear();
                return;
            }
            // this.mkdirsSync(this.path);
            let keys = this._catch.keys;
            for (let j = 0; j < keys.length; j++) {
                let time = new Time_1.LocalDate;
                // 日志按照小时记录在文件中
                let logName = `${process.pid}-${time.getFullYear()}-${time.getMonth() + 1}-${time.getDate()}_${time.getHours()}.tga.log`;
                let fileName = logName;
                let write_buff = '';
                let cache = this._catch.get(keys[j]);
                for (let i = 0; i < cache.length; i++) {
                    write_buff += JSON.stringify(cache[i], function (k, v) {
                        if (typeof v == 'string') {
                            v = v.replace(/"/g, '\\"');
                        }
                        return v;
                    }) + '\n';
                    if (i != 0 && i % 20 == 0) {
                        HttpQuest_1.http_quest("post", this.path, { file: fileName, data: write_buff });
                        write_buff = '';
                    }
                }
                if (write_buff.length != 0) {
                    HttpQuest_1.http_quest("post", this.path, { file: fileName, data: write_buff });
                    write_buff = '';
                }
            }
            this._catch.clear();
            return;
        });
    }
    logEvent(uid, event_name, obj) {
        let s = {
            "#account_id": (uid || "").toString(),
            // "#distinct_id": "F53A58ED-E5DA-4F18-B082-7E1228746E88",
            "#type": 'track',
            // "#ip": "192.168.171.111",
            // "#time": "2017-12-18 14:37:28.527",
            "#time": /*"2017-12-18 14:37:28.527"*/ Time_1.LocalDate.formateString(Date.now()),
            "#event_name": event_name,
            "properties": obj
        };
        this._catch.add(event_name, s);
    }
    logStatic(uid, eventType, obj) {
        let account_id = (uid || "").toString();
        let s = {
            "#account_id": account_id,
            // "#distinct_id": "F53A58ED-E5DA-4F18-B082-7E1228746E88",
            "#type": (eventType || "").toString(),
            // "#ip": "192.168.171.111",
            "#time": /*"2017-12-18 14:37:28.527"*/ Time_1.LocalDate.formateString(Date.now()),
            "properties": obj
        };
        this._catch.add('_static_', s);
    }
    logApi(api, method, uid, succ, consumeTime, reqID, param, response) {
        let event_name = "api";
        let s = {
            "#account_id": (uid || "").toString(),
            // "#distinct_id": "F53A58ED-E5DA-4F18-B082-7E1228746E88",
            "#type": 'track',
            // "#ip": "192.168.171.111",
            // "#time": "2017-12-18 14:37:28.527",
            "#time": /*"2017-12-18 14:37:28.527"*/ Time_1.LocalDate.formateString(Date.now()),
            "#event_name": event_name,
            "properties": {
                'api_category': api,
                'api_method': method,
                'is_success': succ ? 1 : 0,
                'consume_time': consumeTime,
                'user_from': (uid || "null").toString(),
                'user_identify': (reqID || "null").toString(),
                'api_response': response.slice(0, this.size),
                'api_param': param.slice(0, this.size),
            }
        };
        // this._catch.add(event_name, s);
    }
}
exports.TGALoggerNet = TGALoggerNet;
//# sourceMappingURL=tganet.js.map