"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigMgr = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
// 这里开始考虑cluster的模式方便部署
class TeConfigMgr {
    constructor() {
        this._tmpValue = {};
        this._configValue = {};
        this._defaultValue = {};
        this._filePath = '';
        this._filePath = path_1.default.join(process.cwd(), 'config.json');
        fs_1.default.watchFile(this._filePath, this._watchFile.bind(this));
        this._loadFile();
    }
    static get inst() {
        if (!this._inst)
            this._inst = new TeConfigMgr();
        return this._inst;
    }
    static get(v, int = false) {
        if (int) {
            return parseInt(this.inst.get(v));
        }
        return this.inst.get(v);
    }
    /**
     * 零时的调整配置，重启后失效
     * @param k
     * @param v
     */
    static set(k, v) {
        this.inst._tmpValue[k] = v;
        this.inst.set(k, v);
    }
    static has(v) {
        return this.inst.has(v);
    }
    static default(d) {
        return this.inst.registDefault(d);
    }
    changeFile(file) {
        fs_1.default.unwatchFile(this._filePath);
        this._filePath = file;
        fs_1.default.watchFile(this._filePath, this._watchFile.bind(this));
        this._configValue = {};
        this._loadFile();
    }
    _loadFile() {
        try {
            var jt = fs_1.default.readFileSync(this._filePath);
            this._configValue = JSON.parse(jt.toString());
            // 这里需要把特殊的配置项目设置进入
            for (let key in this._tmpValue) {
                this.set(key, this._tmpValue[key]);
            }
        }
        catch (e) {
        }
    }
    _watchFile(curr, prev) {
        if (prev.ctime.getTime() == 0 && curr.ctime.getTime() != 0) {
            //console.log('文件被创建!');
            this._loadFile();
        }
        else if (curr.ctime.getTime() == 0) {
            // console.log('文件被删除!');
            // 文件删除了，但是配置先不要响应删除操作了
        }
        else if (curr.mtime.getTime() != prev.mtime.getTime()) {
            // console.log('文件有修改');
            this._loadFile();
        }
    }
    registDefault(def) {
        this._defaultValue = Object.assign(this._defaultValue, def);
    }
    _get(srcObj, key) {
        var arr = key.split('.');
        var tObj = srcObj;
        for (var i = 0; i < arr.length; i++) {
            if (!tObj)
                return null;
            tObj = tObj[arr[i]];
        }
        return tObj;
    }
    get(key) {
        var ret = this._get(this._configValue, key);
        if (ret == null)
            ret = this._get(this._defaultValue, key);
        if (ret == null)
            ret = 0;
        return ret;
    }
    set(key, v) {
        if (this._set(this._configValue, key, v, false)) {
            return;
        }
        this._set(this._defaultValue, key, v, true);
    }
    // 设置新的属性上去，如果没有就不设置了
    _set(srcObj, key, v, force) {
        var arr = key.split('.');
        var tObj = srcObj;
        for (var i = 0; i < arr.length; i++) {
            if (i == arr.length - 1) {
                tObj[arr[i]] = v;
            }
            else {
                if (tObj[arr[i]] == undefined) {
                    if (force == false)
                        return false;
                    else {
                        tObj[arr[i]] = {};
                    }
                }
                tObj = tObj[arr[i]];
            }
        }
        return true;
    }
    _has(srcObj, key) {
        var arr = key.split('.');
        var tObj = srcObj;
        for (var i = 0; i < arr.length; i++) {
            if (!tObj || !tObj.hasOwnProperty(arr[i]))
                return false;
            tObj = tObj[arr[i]];
        }
        return true;
    }
    has(key) {
        // this._use_key_log(key);
        // 先找动态的
        // 再找配置的
        // 最后找默认的
        var ret = false;
        if (ret == false)
            ret = this._has(this._configValue, key);
        if (ret == false)
            ret = this._has(this._defaultValue, key);
        if (ret == false)
            ret = false;
        return ret;
    }
    /**
     * 制作json配置用的模板文件，或者说把配置用的js文件转成json文件，主要是json是不能有注释的
     */
    createTemplateJson() {
        // 这里把defalut的生成一个json的就可以了
        var jsonFile = JSON.stringify(this._defaultValue, null, 4);
        var pd = path_1.default.parse(this._filePath);
        fs_1.default.writeFileSync(path_1.default.join(pd.dir, 'config.templete'), jsonFile);
    }
}
var instance = new TeConfigMgr();
exports.ConfigMgr = {
    name: 'ConfigMgr',
    /**
     * 获取配置项 支持 a.b.c
     * @param {string} v
     * @param {boolean} int
     */
    get: function (v, int = false) {
        return (int ? parseInt(instance.get(v)) : instance.get(v));
    },
    set: function (k, value) {
        return instance.set(k, value);
    },
    /**
     * 检查配置项是否存在 支持 a.b.c
     * @param v
     */
    has: function (v) {
        return instance.has(v);
    },
    /**
     * 设置默认配置项
     * @param d
     */
    default: function (d) {
        return instance.registDefault(d);
    },
    /**
     * 切换配置文件
     * @param path
     */
    changeFile: function (path) {
        return instance.changeFile(path);
    }
};
exports.default = exports.ConfigMgr;
