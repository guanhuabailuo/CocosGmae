"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPFindMany = exports.IPFindOne = void 0;
const os_1 = __importDefault(require("os"));
function IPV4ToNumber(ip) {
    let ips = ip.split('.');
    let num = BigInt(0);
    for (let i = 0; i < ips.length; i++) {
        num |= BigInt(ips[i]) << BigInt((ips.length - 1 - i) * 8);
    }
    // console.log(num);
    return num;
}
function IPV6ToNumber(ip) {
    let ips = ip.split(':');
    let num = BigInt(0);
    for (let i = 0; i < ips.length; i++) {
        let sNum = ips[i];
        if (sNum.length == 0) {
            sNum = "0x0";
        }
        else {
            sNum = "0x" + ips[i];
        }
        num |= BigInt(sNum) << BigInt((ips.length - 1 - i) * 16);
    }
    // console.log(num);
    return num;
}
function findHost(type) {
    let nets = os_1.default.networkInterfaces();
    // console.log(nets);
    let ips = [];
    for (let key in nets) {
        let interfaces = nets[key];
        if (!interfaces)
            continue;
        for (let i = 0; i < interfaces.length; i++) {
            let info = interfaces[i];
            // 不找内部接口
            if (info.internal)
                continue;
            if (type && info.family != type)
                continue;
            // 只找ipv4的
            if (info.family == "IPv4") {
                // 不找自己分配的ip (暂定是子域中的第一个)
                let ip = IPV4ToNumber(info.address);
                let mask = IPV4ToNumber(info.netmask);
                let subIP = ip & ~mask;
                if (subIP == BigInt(1))
                    continue;
                // console.log(ip)
            }
            else if (info.family == "IPv6") {
                // 不找自己分配的ip (暂定是子域中的第一个)
                let ip = IPV6ToNumber(info.address);
                let mask = IPV6ToNumber(info.netmask);
                let subIP = ip & ~mask;
                if (subIP == BigInt(1) || subIP == BigInt(0))
                    continue;
                // console.log(ip)
            }
            ips.push(info.address);
            // console.log(info.address);
        }
    }
    return ips;
}
function IPFindOne(type) {
    let ips = findHost(type);
    return (ips.length == 0) ? "localhost" : ips[0];
}
exports.IPFindOne = IPFindOne;
function IPFindMany(type) {
    let ips = findHost(type);
    return (ips.length == 0) ? ["localhost"] : ips;
}
exports.IPFindMany = IPFindMany;
// findOne()
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0Q0FBbUI7QUFFbkIsU0FBUyxZQUFZLENBQUMsRUFBVTtJQUM1QixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNqQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsb0JBQW9CO0lBQ3BCLE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEVBQVU7SUFDNUIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDbEIsSUFBSSxHQUFHLEtBQUssQ0FBQTtTQUNmO2FBQ0k7WUFDRCxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUN2QjtRQUNELEdBQUcsSUFBSSxNQUFN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UFY0VG9OdW1iZXIoaXA6IHN0cmluZykge1xyXG4gICAgbGV0IGlwcyA9IGlwLnNwbGl0KCcuJyk7XHJcbiAgICBsZXQgbnVtID0gQmlnSW50KDApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBudW0gfD0gQmlnSW50KGlwc1tpXSkgPDwgQmlnSW50KChpcHMubGVuZ3RoIC0gMSAtIGkpICogOCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc29sZS5sb2cobnVtKTtcclxuICAgIHJldHVybiBudW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIElQVjZUb051bWJlcihpcDogc3RyaW5nKSB7XHJcbiAgICBsZXQgaXBzID0gaXAuc3BsaXQoJzonKTtcclxuICAgIGxldCBudW0gPSBCaWdJbnQoMCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlwcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBzTnVtID0gaXBzW2ldO1xyXG4gICAgICAgIGlmIChzTnVtLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHNOdW0gPSBcIjB4MFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzTnVtID0gXCIweFwiICsgaXBzW2ldXHJcbiAgICAgICAgfVxyXG4gICAgICAgIG51bSB8PSBCaWdJbnQoc051bSkgPDwgQmlnSW50KChpcHMubGVuZ3RoIC0gMSAtIGkpICogMTYpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKG51bSk7XHJcbiAgICByZXR1cm4gbnVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kSG9zdCh0eXBlPzogXCJJUHY0XCIgfCBcIklQdjZcIikge1xyXG4gICAgbGV0IG5ldHMgPSBvcy5uZXR3b3JrSW50ZXJmYWNlcygpO1xyXG4gICAgLy8gY29uc29sZS5sb2cobmV0cyk7XHJcbiAgICBsZXQgaXBzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICBmb3IgKGxldCBrZXkgaW4gbmV0cykge1xyXG4gICAgICAgIGxldCBpbnRlcmZhY2VzID0gbmV0c1trZXldO1xyXG4gICAgICAgIGlmICghaW50ZXJmYWNlcykgY29udGludWU7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnRlcmZhY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmZvID0gaW50ZXJmYWNlc1tpXTtcclxuICAgICAgICAgICAgLy8g5LiN5om+5YaF6YOo5o6l5Y+jXHJcbiAgICAgICAgICAgIGlmIChpbmZvLmludGVybmFsKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHR5cGUgJiYgaW5mby5mYW1pbHkgIT0gdHlwZSkgY29udGludWU7XHJcbiAgICAgICAgICAgIC8vIOWPquaJvmlwdjTnmoRcclxuICAgICAgICAgICAgaWYgKGluZm8uZmFtaWx5ID09IFwiSVB2NFwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDkuI3mib7oh6rlt7HliIbphY3nmoRpcCAo5pqC5a6a5piv5a2Q5Z+f5Lit55qE56ys5LiA5LiqKVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpcCA9IElQVjRUb051bWJlcihpbmZvLmFkZHJlc3MpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hc2sgPSBJUFY0VG9OdW1iZXIoaW5mby5uZXRtYXNrKTtcclxuICAgICAgICAgICAgICAgIGxldCBzdWJJUCA9IGlwICYgfm1hc2s7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3ViSVAgPT0gQmlnSW50KDEpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGlwKVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbmZvLmZhbWlseSA9PSBcIklQdjZcIikge1xyXG4gICAgICAgICAgICAgICAgLy8g5LiN5om+6Ieq5bex5YiG6YWN55qEaXAgKOaaguWumuaYr+WtkOWfn+S4reeahOesrOS4gOS4qilcclxuICAgICAgICAgICAgICAgIGxldCBpcCA9IElQVjZUb051bWJlcihpbmZvLmFkZHJlc3MpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hc2sgPSBJUFY2VG9OdW1iZXIoaW5mby5uZXRtYXNrKTtcclxuICAgICAgICAgICAgICAgIGxldCBzdWJJUCA9IGlwICYgfm1hc2s7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3ViSVAgPT0gQmlnSW50KDEpIHx8IHN1YklQID09IEJpZ0ludCgwKSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpcClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXBzLnB1c2goaW5mby5hZGRyZXNzKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaW5mby5hZGRyZXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlwcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIElQRmluZE9uZSh0eXBlPzogXCJJUHY0XCIgfCBcIklQdjZcIikge1xyXG4gICAgbGV0IGlwcyA9IGZpbmRIb3N0KHR5cGUpO1xyXG4gICAgcmV0dXJuIChpcHMubGVuZ3RoID09IDApID8gXCJsb2NhbGhvc3RcIiA6IGlwc1swXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIElQRmluZE1hbnkodHlwZT86IFwiSVB2NFwiIHwgXCJJUHY2XCIpIHtcclxuICAgIGxldCBpcHMgPSBmaW5kSG9zdCh0eXBlKTtcclxuICAgIHJldHVybiAoaXBzLmxlbmd0aCA9PSAwKSA/IFtcImxvY2FsaG9zdFwiXSA6IGlwcztcclxufVxyXG5cclxuLy8gZmluZE9uZSgpIl19