"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReList = void 0;
const TeMongodb_1 = require("./TeMongodb");
const Util_1 = require("../lib/Util");
class ReList {
    // private _cc_: MONGO.Cursor | null = null;
    constructor(parent, fobj, args) {
        this.fobj = {};
        this._data_ = [];
        this._online_ = false;
        this._start = 0;
        this._limit = 0;
        this.fobj = fobj;
        this._collection_ = parent;
        this.args = args;
    }
    get findKey() {
        return this.fobj;
    }
    // 深拷贝一份数据
    clone() {
        return Util_1.Util.copy(this._data_);
    }
    get value() {
        var ot = this.clone();
        for (var i = 0; i < ot.length; i++) {
            delete ot[i]['_id'];
        }
        return ot;
    }
    get value_all() {
        return this.clone();
    }
    get data() {
        return this._data_;
    }
    set(index, key, value) {
        if (!this._online_)
            return;
        var s_v = this.get_at(index, true);
        if (!s_v)
            return;
        // 找到里面的
        if (s_v[key] == value)
            return;
        if (value == undefined) {
            delete s_v[key];
        }
        else {
            s_v[key] = value;
        }
        this._collection_.save(s_v);
    }
    push_back(v) {
        v = Util_1.Util.attach(v, this.findKey);
        this._data_.push(v);
        this._collection_.insertOne(v, (err, res) => {
            let idx = this._data_.length;
            if (!this._online_)
                return;
            if (res.result.ok && res.ops.length) {
                this._data_[idx - 1] = res.ops[0];
            }
            else {
                this._data_.splice(idx - 1, 1);
            }
        });
    }
    limit(num) {
        this._limit = num;
        return this;
    }
    skip(num) {
        this._start = num;
        return this;
    }
    /**
     * @description 加载列表数据
     * @date 2020-03-25
     * @param {*} [filter] 筛选的字段
     * @param {*} [sort] 排序的字段
     * @returns 返回查询对象
     * @memberof ReList
     */
    load(filter, sort) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filter && typeof filter == "boolean") {
                filter = sort;
                sort = undefined;
            }
            this._online_ = true;
            let _cc_ = this._collection_.find(this.findKey, { projection: filter, skip: this._start, sort: sort });
            let _this = this;
            return new Promise(function (resolve, reject) {
                function batchFind() {
                    _cc_ && _cc_.next((err, result) => {
                        if (err) {
                            TeMongodb_1.error('db load error batchFind', JSON.stringify(err, null, 4));
                            reject(err);
                        }
                        else {
                            if (result == null) {
                                process.nextTick(resolve, _this);
                            }
                            else {
                                _this._data_.push(result);
                                if (_this._limit && _this._data_.length >= _this._limit) {
                                    process.nextTick(resolve, _this);
                                }
                                else {
                                    process.nextTick(batchFind);
                                }
                            }
                        }
                    });
                }
                process.nextTick(batchFind);
            });
        });
    }
    get length() {
        return this._data_.length;
    }
    get_at(index, org = false) {
        if (index < 0 || index >= this._data_.length)
            return null;
        if (org)
            return this._data_[index];
        return Util_1.Util.copy(this._data_[index]);
    }
    rm_at(index) {
        if (index < 0 || index >= this._data_.length)
            return;
        var rp = this._data_.splice(index, 1);
        for (var i = 0; i < rp.length; i++) {
            this._collection_.remove({ _id: rp[i]['_id'] });
        }
    }
    clear_all() {
        while (this.length > 0) {
            this.rm_at(0);
        }
    }
    _has_same(v, fobj) {
        var bSame = true;
        for (var key in fobj) {
            if (v[key] != fobj[key]) {
                bSame = false;
                break;
            }
        }
        return bSame;
    }
    del(fObj) {
        var idx = -1;
        for (var i = 0; i < this._data_.length; i++) {
            var c = this._data_[i];
            if (this._has_same(c, fObj)) {
                idx = i;
                break;
            }
        }
        // var idx = this._data_.indexOf(v);
        if (idx >= 0)
            this.rm_at(idx);
    }
}
exports.ReList = ReList;
//# sourceMappingURL=ReList.js.map