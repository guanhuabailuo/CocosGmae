"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const Util_1 = require("../lib/Util");
const Time_1 = require("../lib/Time");
class TaoBaoLogger {
    constructor(config) {
        this._catch = new Util_1.HashMap();
        this.open = false;
        this.name = "taobao";
        try {
            let ALY = require('aliyun-sdk');
            this.SLS = new ALY.SLS({
                accessKeyId: config.accessKeyId,
                secretAccessKey: config.secretAccessKey,
                endpoint: config.endpoint,
                apiVersion: config.apiVersion
            });
            this.open = true;
        }
        catch (e) {
            // throw Error("need npm i aliyun-sdk")
            console.error("need: npm i aliyun-sdk");
        }
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.handle)
                this.handle.stop();
            this.handle = Util_1.Util.setInterval(this.update.bind(this), 2000);
            return true;
        });
    }
    mkdirsSync(dirpath) {
        if (!fs_1.existsSync(dirpath)) {
            fs_1.mkdirSync(dirpath, { recursive: true });
        }
        return true;
    }
    putLogs(info) {
        return new Promise((r, j) => {
            this.SLS.putLogs(info, function (error, data) {
                if (error) {
                    j(error);
                }
                else {
                    r(data);
                }
            });
        });
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.open) {
                this._catch.clear();
                return;
            }
            // this.mkdirsSync(this.path);
            let keys = this._catch.keys;
            for (let j = 0; j < keys.length; j++) {
                let cache = this._catch.get(keys[j]);
                let logGroup = {
                    logs: [],
                    topic: keys[j]
                };
                for (let i = 0; i < cache.length; i++)
                    logGroup.logs.push(cache[i]);
                if (logGroup.logs.length > 0) {
                    // 暂时都投递算了
                    this.putLogs({
                        projectName: "mx-hudong",
                        logStoreName: "taobaoplt",
                        logGroup
                    }).catch(function (e) {
                        console.log("logs error", e);
                    });
                }
            }
            this._catch.clear();
            return;
        });
    }
    logEvent(uid, event_name, obj) {
        let s = {
            time: Math.floor(Time_1.LocalDate.now() / 1000),
            contents: [{ key: "#account_id", value: uid }, { key: "#event_name", value: event_name }]
        };
        for (let key in obj) {
            s.contents.push({
                key: key,
                value: (obj[key] || "").toString()
            });
        }
        this._catch.add(event_name, s);
    }
    logStatic(uid, eventType, obj) {
        // let account_id = uid.toString();
        // let s = {
        //     "#account_id": account_id,
        //     // "#distinct_id": "F53A58ED-E5DA-4F18-B082-7E1228746E88",
        //     "#type": eventType.toString(),
        //     // "#ip": "192.168.171.111",
        //     "#time": /*"2017-12-18 14:37:28.527"*/ LocalDate.formateString(Date.now()),
        //     "properties": obj
        // }
        // this._catch.add('_static_', s);
        return;
    }
    logApi(api, method, uid, succ, consumeTime, reqID, param, response) {
        let event_name = "api";
        let s = {
            "#account_id": (uid || "").toString(),
            // "#distinct_id": "F53A58ED-E5DA-4F18-B082-7E1228746E88",
            "#type": 'track',
            // "#ip": "192.168.171.111",
            // "#time": "2017-12-18 14:37:28.527",
            "#time": /*"2017-12-18 14:37:28.527"*/ Time_1.LocalDate.formateString(Date.now()),
            "#event_name": event_name,
            "properties": {
                'api_category': api,
                'api_method': method,
                'is_success': succ ? 1 : 0,
                'consume_time': consumeTime,
                'user_from': (uid || "null").toString(),
                'user_identify': (reqID || "null").toString(),
                'api_response': response,
                'api_param': param,
            }
        };
        this._catch.add(event_name, s);
    }
}
exports.TaoBaoLogger = TaoBaoLogger;
//# sourceMappingURL=taobao.js.map