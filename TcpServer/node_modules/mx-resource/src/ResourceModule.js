"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importStar(require("fs"));
const path_1 = require("path");
const crypto_1 = require("crypto");
const events_1 = require("events");
const HttpQuest_1 = require("./HttpQuest");
const debug_1 = __importDefault(require("debug"));
const exec_pools_1 = require("../lib/exec_pools");
const url_1 = require("url");
let Debug = debug_1.default('server-libs');
function error(...args) {
    Debug('%O', ...args);
}
class ResourceModule extends events_1.EventEmitter {
    constructor(file, _package, url, fullPath = false) {
        super();
        //-----------------------------------------------//
        this.resData = {};
        this.resDataOri = {};
        this.file = '';
        this.package = '';
        this.md5 = '';
        this.url = '';
        this.package = _package || '';
        if (fullPath || fs_1.default.existsSync(file)) {
            this.file = file;
        }
        else {
            this.file = path_1.join(process.cwd(), file);
        }
        this.url = url || '';
    }
    /**
     * 监听资源
     * @param file
     * @param syncNet
     */
    static watch(file, _package, syncNet, fullPath = false) {
        if (this.cache.hasOwnProperty(file))
            return this.cache[file];
        this.cache[file] = new ResourceModule(file, _package, syncNet, fullPath);
        this.cache[file].init();
        return this.cache[file];
    }
    /**
     * 检查资源
     * @param thread
     */
    static checkResource(thread = 2) {
        return __awaiter(this, void 0, void 0, function* () {
            let runningPool = [];
            for (let key in this.cache) {
                let k = this.cache[key];
                // await k.onlineCheck().catch(e => { error('checkResource', e) })
                runningPool.push(k.onlineCheck.bind(k));
            }
            yield exec_pools_1.execPools(runningPool, thread);
            return true;
        });
    }
    init() {
        fs_1.default.watchFile(this.file, this._onFileChange.bind(this));
        this._loadFile();
        process.nextTick(() => {
            this.emit("change");
        });
        this.onlineCheck();
    }
    on(event, listener) {
        super.on(event, listener);
        return this;
    }
    once(event, listener) {
        super.once(event, listener);
        return this;
    }
    _onFileChange(curr, prev) {
        if (prev.ctime.getTime() == 0) {
            //console.log('文件被创建!');
            this._loadFile();
        }
        else if (curr.ctime.getTime() == 0) {
            // console.log('文件被删除!')
            this.resData = {};
            this.md5 = '';
            this.emit('change');
        }
        else if (curr.mtime.getTime() != prev.mtime.getTime()) {
            // console.log('文件有修改');
            this._loadFile();
        }
    }
    _loadFile() {
        let srcMd5 = this.md5;
        this.resData = {};
        this.resDataOri = {};
        this.md5 = '';
        try {
            let fileInfo = fs_1.default.readFileSync(this.file).toString();
            this.md5 = crypto_1.createHash('md5').update(fileInfo).digest('hex');
            let allData = JSON.parse(fileInfo);
            for (let key in allData) {
                if (!allData.hasOwnProperty(key) || key == 'Template') {
                    continue;
                }
                this.resData['k' + key] = allData[key];
                this.resDataOri[key] = allData[key];
            }
        }
        catch (e) {
            error('res error:' + this.file);
        }
        if (this.md5 != srcMd5)
            this.emit('change');
    }
    getAllRes() {
        return this.resData;
    }
    ;
    getOriAllRes() {
        return this.resDataOri;
    }
    getRes(id) {
        id = 'k' + id;
        if (this.resData.hasOwnProperty(id)) {
            return this.resData[id];
        }
        return undefined;
    }
    ;
    has(id) {
        id = 'k' + id;
        if (this.resData.hasOwnProperty(id)) {
            return true;
        }
        return false;
    }
    /**
     * 遍历
     * @param func 返回 true的时候跳出循环
     */
    forEach(func) {
        for (let key in this.resData) {
            if (func(this.resData[key], key.slice(1, key.length), this)) {
                break;
            }
        }
    }
    /**
     * 增加一个线上检查的过程
     */
    onlineCheck() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.url)
                return false;
            let pFile = path_1.parse(this.file);
            let url = this.url;
            if (url[url.length - 1] != '/') {
                url = url + '/';
            }
            let result;
            try {
                result = yield HttpQuest_1.http_quest('get', url_1.resolve(url, './check'), {
                    package: this.package,
                    file: pFile.name + pFile.ext,
                    md5: this.md5
                }, 0, null, { respon_type: 'json' });
            }
            catch (e) {
                // 网络异常的话就跳过算了
                return false;
            }
            if (result.code == 0) {
                // 表示资源是一致的
                return true;
            }
            let _result;
            try {
                _result = yield HttpQuest_1.http_quest('get', url_1.resolve(url, './download'), {
                    package: this.package,
                    file: pFile.name + pFile.ext
                }, 0, null, { respon_type: 'json' });
            }
            catch (e) {
                return false;
            }
            if (_result.code != 0)
                return false;
            // 这里测试一下是否ok
            try {
                // 测试一下数据
                JSON.parse(_result.text);
                if (!fs_1.existsSync(pFile.dir))
                    fs_1.mkdirSync(pFile.dir, { recursive: true });
                fs_1.writeFileSync(this.file, _result.text, { flag: "w+" });
                this._loadFile();
            }
            catch (e) {
            }
            return true;
        });
    }
}
exports.ResourceModule = ResourceModule;
ResourceModule.cache = {};
//# sourceMappingURL=ResourceModule.js.map