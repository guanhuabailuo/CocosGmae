"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Util_1 = require("../lib/Util");
const HttpQuest_1 = require("../lib/HttpQuest");
// 提供一个接入自己的 小小小日志系统的模块
class LogKitLogger {
    constructor(cfg) {
        this._catch = new Util_1.HashMap();
        this.open = false;
        this.url = "";
        this.project_id = "";
        this.name = "logkit";
        this.url = cfg.url;
        this.project_id = cfg.projectid;
        this.open = true;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.handle)
                this.handle.stop();
            this.handle = Util_1.Util.setInterval(this.update.bind(this), 200);
            return true;
        });
    }
    putLogs(data) {
        HttpQuest_1.http_quest("post", this.url, data, 0, null, { request_type: "json" }).then(d => {
            // Debug("mx-logger")("success", this.url, d)
            // console.log(d)
        }).catch(e => {
            // Debug("mx-logger")("error", this.url, e)
            // console.error(e)
        });
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.open) {
                this._catch.clear();
                return;
            }
            // this.mkdirsSync(this.path);
            let keys = this._catch.keys;
            for (let j = 0; j < keys.length; j++) {
                let cache = this._catch.get(keys[j]);
                let logGroup = { data: [], action: keys[j] };
                for (let i = 0; i < cache.length; i++)
                    logGroup.data.push(cache[i]);
                if (logGroup.data.length > 0) {
                    // 暂时都投递算了
                    this.putLogs(logGroup);
                }
            }
            this._catch.clear();
            return;
        });
    }
    logEvent(uid, event_name, obj) {
        let s = {
            "project_id": this.project_id,
            "log_category": event_name,
            "log_point": obj.type || obj.sType || "null",
            "log_sn": (obj.sActiveId || obj.sActiveID || "null").toString(),
            "log_data": obj,
            "log_from": (uid || "0").toString(),
        };
        this._catch.add("reports", s);
    }
    logStatic(uid, eventType, obj) {
        // 暂时没有实现
        // let account_id = (uid || "").toString();
        // let s = {
        //     "#account_id": account_id,
        //     // "#distinct_id": "F53A58ED-E5DA-4F18-B082-7E1228746E88",
        //     "#type": (eventType || "").toString(),
        //     // "#ip": "192.168.171.111",
        //     "#time": /*"2017-12-18 14:37:28.527"*/ LocalDate.formateString(Date.now()),
        //     "properties": obj
        // }
        // this._catch.add('_static_', s);
    }
    logApi(api, method, uid, succ, consumeTime, reqID, param, response, isShowAll) {
        let api_param = param;
        let api_response = response;
        if (!isShowAll) {
            api_param = api_param.slice(0, 300);
            api_response = api_response.slice(0, 300);
        }
        // console.log(api_response);
        let s = {
            'project_id': this.project_id,
            'api_category': api,
            'api_method': method,
            'is_success': succ ? 1 : 0,
            'consume_time': consumeTime,
            'user_from': (uid || "null").toString(),
            'user_identify': (reqID || "null").toString(),
            'api_response': api_response,
            'api_param': api_param,
        };
        this._catch.add('apis', s);
    }
}
exports.LogKitLogger = LogKitLogger;
//# sourceMappingURL=logkit.js.map