"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeMongoDB = exports.error = void 0;
const events_1 = require("events");
const MONGO = __importStar(require("mongodb"));
const debug_1 = require("debug");
const TeMongoDBUnit_1 = require("./TeMongoDBUnit");
let Debug = debug_1.debug('server-libs');
function error(...args) {
    Debug('%O', ...args);
}
exports.error = error;
class TeMongoDB extends events_1.EventEmitter {
    constructor() {
        super();
        this._gl_opts = {};
        this._pre_inits = [];
        // protected db: MONGO.Db;
        this._state_ = 'close';
        this._update_time = 0;
        this._last_error = '';
        this.db_maps = {};
        this.db_keys = [];
        this.mongodb = new MONGO.MongoClient('');
    }
    get ready() {
        return this._state_ == 'ready';
    }
    get state() {
        return this._state_;
    }
    set state(v) {
        this._state_ = v;
        this._update_time = Date.now();
    }
    get sys_state() {
        return {
            state: this._state_,
            up_time: this._update_time,
            last_err: this._last_error
        };
    }
    /**
     *
     * @param database_name 数据库的名字
     * @param collections 需要的数据集 可以选，选择后会生成对应的数据集后返回准备状态
     */
    get_database(database_name, collections = [], col_indexs) {
        if (!this.db_maps.hasOwnProperty(database_name)) {
            var opts = {};
            if (this.mongodb instanceof MONGO.ReplSet) {
                this.db_maps[database_name] = new TeMongoDBUnit_1.TeMongoDBUnit(new MONGO.Db(database_name, this.mongodb, this._gl_opts), collections, col_indexs || []);
            }
            else {
                this.db_maps[database_name] = new TeMongoDBUnit_1.TeMongoDBUnit(this.mongodb.db(database_name, opts), collections, col_indexs || []);
            }
            this.db_keys = Object.keys(this.db_maps);
        }
        var map = this.db_maps[database_name];
        map.check_ready();
        return map;
    }
    get_collection_size(db, col, cb) {
        let db_ = this.get_database(db);
        db_.get_collection_size(col, cb);
    }
    get defaultBDName() {
        if (this.db_keys.length > 0) {
            return this.db_keys[0];
        }
        else {
            return '';
        }
    }
    error_listen() {
        let events = [
            {
                name: 'timeout', func: () => {
                    this.state = 'timeout';
                    error('timeout');
                    this.emit('state', this.state);
                }
            },
            {
                name: 'error',
                func: (e) => {
                    if (e) {
                        this._last_error = e.toString();
                        error(this._last_error);
                        this.state = 'error';
                        this.emit('state', this.state);
                    }
                }
            },
            {
                name: 'close', func: () => {
                    this.state = 'close';
                    this.emit('state', this.state);
                }
            },
            {
                name: 'joined',
                func: (type, db) => {
                    if (type == 'primate' && this.state == 'left_primate') {
                        this.state = 'ready';
                        this.emit('state', this.state);
                    }
                },
            },
            {
                name: 'left',
                func: (type, db) => {
                    if (type == 'primate') {
                        this.state = 'left_primate';
                        error('left_primate');
                        this.emit('state', this.state);
                    }
                }
            }
        ];
        events.forEach(element => {
            this.mongodb.on(element.name, element.func);
        });
    }
    init(hosts, options = {}, pre_inits) {
        options.autoReconnect = true;
        var uri = '';
        if (hosts instanceof Array) {
            uri += 'mongodb://';
            if (options.auth) {
                uri += `${options.auth.user}:${options.auth.password}@`;
            }
            let server_lists = [];
            if (hosts.length == 1) {
                let { host: host, port: port } = hosts[0];
                server_lists.push(`${host}:${port}`);
            }
            else {
                for (var i = 0; i < hosts.length; i++) {
                    let { host: host, port: port } = hosts[i];
                    server_lists.push(`${host}:${port}`);
                }
            }
            uri += server_lists.join(',');
            if (options.auth) {
                uri += `/${options['user_db'] || 'admin'}`;
            }
            if (options.replicaSet) {
                uri += `?replicaSet=${options.replicaSet}`;
            }
        }
        else {
            uri = hosts;
        }
        // 'mongodb://root:chenkai@dds-bp1af52f28ac18141987-pub.mongodb.rds.aliyuncs.com:3717,dds-bp1af52f28ac18142178-pub.mongodb.rds.aliyuncs.com:3717/admin?replicaSet=mgset-7383357'
        this.mongodb = new MONGO.MongoClient(uri, Object.assign(options, { useUnifiedTopology: true, useNewUrlParser: true }));
        this._pre_inits = this._pre_inits.concat(pre_inits);
        // MONGO.Logger.setLevel("debug");
        this.mongodb['connect']((err, db) => {
            if (err) {
                this.state = 'error';
                this._last_error = err.toString();
                error(this._last_error);
                this.emit('error', err);
            }
            else {
                db.emit('open22');
            }
        });
        this.mongodb.on('open22', this._on_ready.bind(this));
        this.error_listen();
        return this;
    }
    _on_ready() {
        // return;
        for (var i = 0; i < this._pre_inits.length; i++) {
            var cf = this._pre_inits[i];
            var db = this.get_database(cf.database, cf.colltions, cf.indexs);
            db.on('ready', ((idx) => {
                this._pre_inits[idx].ready = true;
                this._check_ready();
            }).bind(this, i));
            db.on('error', (e) => {
                this._last_error = e.toString();
                this.state = 'error';
                error(this._last_error);
                this.emit('error', e);
            });
        }
        this._check_ready();
    }
    _check_ready() {
        var ok = true;
        for (var i = 0; i < this._pre_inits.length; i++) {
            var r = this._pre_inits[i];
            if (!r.ready) {
                ok = false;
                break;
            }
        }
        if (ok) {
            this.emit('ready');
            this.state = 'ready';
        }
    }
}
exports.TeMongoDB = TeMongoDB;
//# sourceMappingURL=TeMongodb.js.map