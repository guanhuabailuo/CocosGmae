import { error } from './TeMongodb';
import { Util } from "../lib/Util"
import MONGO from "mongodb"

export class ReList<T> {
    private fobj: Object = {};
    private _collection_: MONGO.Collection;
    public args: any;
    private _data_: T[] = [];
    private _online_: boolean = false;
    // private _cc_: MONGO.Cursor | null = null;
    constructor(parent: MONGO.Collection, fobj: Object, args: any) {
        this.fobj = fobj;
        this._collection_ = parent;
        this.args = args;
    }
    get findKey() {
        return this.fobj;
    }
    // 深拷贝一份数据
    clone() {
        return Util.copy(this._data_) as T[];
    }
    get value(): T[] {
        var ot: any = this.clone();
        for (var i = 0; i < ot.length; i++) {
            delete ot[i]['_id'];
        }
        return ot;
    }
    get value_all(): T[] {
        return this.clone();
    }
    get data() {
        return this._data_ as T[];
    }
    set(index: number, key: string, value: any) {
        if (!this._online_)
            return;
        var s_v = this.get_at(index, true) as any;
        if (!s_v)
            return;
        // 找到里面的
        if (s_v[key] == value)
            return;
        if (value == undefined) {
            delete s_v[key];
        }
        else {
            s_v[key] = value;
        }
        this._collection_.save(s_v);
    }
    push_back(v: T) {
        v = Util.attach(v, this.findKey);
        this._data_.push(v);
        this._collection_.insertOne(v, (err: any, res: {
            ops: T[];
            result: {
                n: number;
                ok: number;
            };
        }) => {
            let idx = this._data_.length;
            if (!this._online_)
                return;
            if (res.result.ok && res.ops.length) {
                this._data_[idx - 1] = res.ops[0];
            }
            else {
                this._data_.splice(idx - 1, 1);
            }
        });
    }
    private _start = 0;
    private _limit = 0;
    limit(num: number) {
        this._limit = num;
        return this;
    }
    skip(num: number) {
        this._start = num;
        return this;
    }
    /**
     * @description 加载列表数据
     * @date 2020-03-25
     * @param {*} [filter] 筛选的字段
     * @param {*} [sort] 排序的字段
     * @returns 返回查询对象
     * @memberof ReList
     */
    async load(filter?: any, sort?: any) {
        if (filter && typeof filter == "boolean") {
            filter = sort;
            sort = undefined
        }

        this._online_ = true;
        let _cc_ = this._collection_.find(this.findKey, { projection: filter, skip: this._start, sort: sort });
        let _this = this;
        return new Promise<ReList<T>>(function (resolve, reject) {
            function batchFind() {
                _cc_ && _cc_.next((err: any, result: any) => {
                    if (err) {
                        error('db load error batchFind', JSON.stringify(err, null, 4));
                        reject(err);
                    }
                    else {
                        if (result == null) {
                            process.nextTick(resolve, _this);
                        }
                        else {
                            _this._data_.push(result);
                            if (_this._limit && _this._data_.length >= _this._limit) {
                                process.nextTick(resolve, _this);
                            }
                            else {
                                process.nextTick(batchFind);
                            }
                        }
                    }
                });
            }
            process.nextTick(batchFind);
        });
    }
    get length() {
        return this._data_.length;
    }
    get_at(index: number, org: boolean = false) {
        if (index < 0 || index >= this._data_.length)
            return null;
        if (org)
            return this._data_[index];
        return Util.copy(this._data_[index]) as T;
    }
    rm_at(index: number) {
        if (index < 0 || index >= this._data_.length)
            return;
        var rp: any = this._data_.splice(index, 1);
        for (var i = 0; i < rp.length; i++) {
            this._collection_.remove({ _id: rp[i]['_id'] });
        }
    }
    clear_all() {
        while (this.length > 0) {
            this.rm_at(0);
        }
    }
    private _has_same(v: T | any, fobj: any) {
        var bSame = true;
        for (var key in fobj) {
            if (v[key] != fobj[key]) {
                bSame = false;
                break;
            }
        }
        return bSame;
    }
    del(fObj: any) {
        var idx = -1;
        for (var i = 0; i < this._data_.length; i++) {
            var c = this._data_[i];
            if (this._has_same(c, fObj)) {
                idx = i;
                break;
            }
        }
        // var idx = this._data_.indexOf(v);
        if (idx >= 0)
            this.rm_at(idx);
    }
}
