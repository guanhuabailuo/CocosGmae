export { IFIndex } from './TeMongodb';
export * from "./ReHash"
export * from "./ReList"
export * from "./CacheMoudle"
export * from "./ReHashList"
import { IndexOptions } from 'mongodb';
import { IFIndex, TeMongoDB } from "./TeMongodb";

var s_ready = false;

var s_mongodb: TeMongoDB = new TeMongoDB();

var s_configs: { [database: string]: { colltions: string[], indexs: IFIndex[], functions: Function[] } } = {};

function init_colltion(database: string) {
    if (!s_configs[database]) {
        s_configs[database] = {
            colltions: [],
            indexs: [],
            functions: []
        }
    }
}

function checkDabase(key: string, r_info: any) {
    return new Promise<void>((resolve) => {
        s_mongodb.get_database(key, r_info.colltions, r_info.indexs).once('ready', function () {
            resolve()
        })
    })
}

/**检查预先设置的表和存储过程是否正确 */
async function check() {
    for (let key in s_configs) {
        let r_info = s_configs[key];
        await checkDabase(key, r_info);

        for (let i = 0; i < r_info.functions.length; i++) {
            await s_mongodb.get_database(key).check_func(r_info.functions[i])
        }
    }
}

export var MongodbMoudle = {
    name: 'MongodbMoudle',
    regist_colltion: function (database: string, name: string, indexs: string[]) {
        let sIndex: IFIndex[] = [];
        for (let i = 0; i < indexs.length; i++) {
            sIndex.push({
                col: name,
                index: indexs[i],
                option: {}
            })
        }
        init_colltion(database);
        s_configs[database].colltions.push(name);
        s_configs[database].indexs.push(...sIndex);
    },
    regist_index: function (database: string, name: string, index: string, option?: IndexOptions) {
        init_colltion(database);
        let find = s_configs[database].indexs.some(v => {
            if (v.index == index && v.col == name) {
                v.option = option || {};

                return true
            }

            return false;
        })

        if (!find) {
            s_configs[database].indexs.push({
                col: name,
                index: index,
                option: option || {}
            })
        }
    },
    regist_function: function (database: string, func: Function) {
        init_colltion(database);
        s_configs[database].functions.push(func);
    },

    /**
     * 获取数据库 一般认为都是初始化过的
     * @param database 
     */
    get_database: function (database: string) {
        return s_mongodb.get_database(database);
    },

    /**
     * 帐号服务器数据库初始化
     * @param configs 
     */
    init: function (configs: { host: string, port: number }[] | string) {
        s_mongodb.on('error', (e) => { s_ready = false; console.log(e) });

        return new Promise<void>(function (resolve, reject) {
            s_mongodb.init(configs, undefined, []).once("ready", function () {
                check().then(() => {
                    s_ready = true;
                    s_mongodb.on('ready', function () {
                        s_ready = true;
                        console.log("mongodb reconnect success")
                    });

                    resolve();
                }).catch(e => {
                    console.log(e);
                    reject();
                })
            })
        })
    }
}