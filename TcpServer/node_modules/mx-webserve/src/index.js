"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRouteModule = void 0;
var webHandle_1 = require("./webHandle");
Object.defineProperty(exports, "WebHandle", { enumerable: true, get: function () { return webHandle_1.WebHandle; } });
var HttpQuest_1 = require("./HttpQuest");
Object.defineProperty(exports, "http_quest", { enumerable: true, get: function () { return HttpQuest_1.http_quest; } });
const server_1 = require("./server");
const path_1 = require("path");
const commonRoute_1 = require("./commonRoute");
const webHandle_2 = require("./webHandle");
const loadWebFiles_1 = require("./loadWebFiles");
const ip_1 = require("./ip");
var instance = new server_1.WebRouteUnit();
var webHandle = new webHandle_2.WebHandle();
/**
 * 这里负责http的解析，然后传递给对于的处理方法
 * 目前比较简陋，后续需要增加一下处理
 *
 * envBefore -> globalBefore -> before -> route -> after -> globalAfter -> envAfter
 *
 */
exports.WebRouteModule = {
    name: 'WebRouteModule',
    /**
     * 是否开启跨域
     */
    openCross() {
        instance.enable("cross");
    },
    // 获取资源实例
    getApp() {
        return instance.app;
    },
    // 开始静态资源目录
    static(pre, root) {
        return instance.static(pre, root);
    },
    proxy(pre, host, options) {
        return instance.proxy(pre, host, options);
    },
    setproxy(ips) {
        return instance.app.set("trust proxy", ips);
    },
    /**
     * 初始化模块
     * @param port
     */
    init(port, webPath, env, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            // 先初始化模块
            webHandle.init(webPath, env);
            // 这里需要增加一个拉起所有的模块文件的功能
            yield instance.init(port, [commonRoute_1.start.bind(webHandle)], limit);
            loadWebFiles_1.loadModule(webPath);
            return true;
        });
    },
    ////////////////////////////////////////////////////////////////
    /**
    * 注册模块
    * @param prePath 模块的前缀词 例如 /a/b 的前缀就是 /a 或者/a/
    */
    class(prePath) {
        return webHandle.class(prePath);
    },
    /**
    * 注册路由
    * @param Name 后缀词 例如 /a/b 的后缀就是 b 或者/b
    */
    route(Name) {
        return webHandle.route(Name);
    },
    /**
    * 检查参数
    * @param name 参数名字
    * @param sType 参数类型
    * @param [change] 是否强制转换类型
    */
    paramRequired(name, sType, change) {
        return webHandle.params(name, sType, true, change);
    },
    /**
   * 检查参数
   * @param name 参数名字
   * @param sType 参数类型
   * @param [change] 是否强制转换类型
   */
    paramOptional(name, sType, change) {
        return webHandle.params(name, sType, false, change);
    },
    /**
     * 模块方法调用前的调用，主要是给数据处理提供前置准备
     */
    before() {
        return webHandle.before();
    },
    /**
     * 模块方法调用后调用，主要是给数据处理提供最后的操作
     */
    after() {
        return webHandle.after();
    },
    /////////////////////////////////////////////////
    /**
     * 注册环境处理模块
     * @param evnName 环境名字
     */
    envClass(evnName) {
        return webHandle.envClass(evnName);
    },
    /**
     * 对应环境下先调用
     */
    envBefore() {
        return webHandle.envBefore();
    },
    /**
     * 对应环境下处理后调用
     */
    envAfter() {
        return webHandle.envAfter();
    },
    /**
     * 注册环境处理模块
     * @param evnName 环境名字
     */
    globalClass() {
        return webHandle.globalClass();
    },
    /**
    *
    */
    globalBefore() {
        return webHandle.globalBefore();
    },
    /**
     *
     */
    globalAfter() {
        return webHandle.globalAfter();
    },
    getHandle() {
        return webHandle;
    },
    //////////////////////////////////////////////////////////////
    /**
     * @description 开启Swagger模块
     * @date 2020-01-16
     * @param {{ basedir: string; routePath: string; description?: string; title?: string; version?: string; host?: string; basePath?: string; produces?: string[]; schemes?: string[]; }} { basedir, jsPath, description = 'This is a sample server', title = 'Swagger', version = '1.0.0', host = 'localhost', basePath = '', produces = [
     *             "application/json"
     *         ], schemes = ['http'] }
     */
    openSwagger({ basedir, host, routePath, basePath = '', ext = ".js", description = 'http api server', title = 'dreamduke', version = '1.0.0', produces = [
        "application/json"
    ], schemes = ['http'] }) {
        let option = {
            swaggerDefinition: {
                info: {
                    description: description,
                    title: title,
                    version: version
                },
                host: host || ip_1.IPFindOne("IPv4"),
                basePath: basePath,
                produces: produces,
                schemes: schemes,
                securityDefinitions: {
                    JWT: {
                        type: 'apiKey',
                        in: 'header',
                        name: 'Authorization',
                        description: "",
                    }
                }
            },
            route: {
                url: '/swagger',
                docs: '/swagger.json',
            },
            basedir: basedir || process.cwd(),
            files: [path_1.join(routePath || './web', '/**/*' + (ext || ".js"))] //Path to the API handle folder
        };
        try {
            const expressSwagger = require('express-swagger-generator')(instance.app);
            expressSwagger(option);
        }
        catch (e) {
            if (e && (e instanceof Error)) {
                console.log('open openSwagger need install node_module : npm install ' + (e.message.match(/\'.*\'/) || []).join(' ').replace(/\'/g, ''));
            }
        }
    },
};
//# sourceMappingURL=data:application/json;base64,