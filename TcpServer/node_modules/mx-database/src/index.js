"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongodbMoudle = void 0;
__exportStar(require("./ReHash"), exports);
__exportStar(require("./ReList"), exports);
__exportStar(require("./CacheMoudle"), exports);
__exportStar(require("./ReHashList"), exports);
const TeMongodb_1 = require("./TeMongodb");
var s_ready = false;
var s_mongodb = new TeMongodb_1.TeMongoDB();
var s_configs = {};
function init_colltion(database) {
    if (!s_configs[database]) {
        s_configs[database] = {
            colltions: [],
            indexs: [],
            functions: []
        };
    }
}
function checkDabase(key, r_info) {
    return new Promise((resolve) => {
        s_mongodb.get_database(key, r_info.colltions, r_info.indexs).once('ready', function () {
            resolve();
        });
    });
}
/**检查预先设置的表和存储过程是否正确 */
function check() {
    return __awaiter(this, void 0, void 0, function* () {
        for (let key in s_configs) {
            let r_info = s_configs[key];
            yield checkDabase(key, r_info);
            for (let i = 0; i < r_info.functions.length; i++) {
                yield s_mongodb.get_database(key).check_func(r_info.functions[i]);
            }
        }
    });
}
exports.MongodbMoudle = {
    name: 'MongodbMoudle',
    regist_colltion: function (database, name, indexs) {
        let sIndex = [];
        for (let i = 0; i < indexs.length; i++) {
            sIndex.push({
                col: name,
                index: indexs[i],
                option: {}
            });
        }
        init_colltion(database);
        s_configs[database].colltions.push(name);
        s_configs[database].indexs.push(...sIndex);
    },
    regist_index: function (database, name, index, option) {
        init_colltion(database);
        let find = s_configs[database].indexs.some(v => {
            if (v.index == index && v.col == name) {
                v.option = option || {};
                return true;
            }
            return false;
        });
        if (!find) {
            s_configs[database].indexs.push({
                col: name,
                index: index,
                option: option || {}
            });
        }
    },
    regist_function: function (database, func) {
        init_colltion(database);
        s_configs[database].functions.push(func);
    },
    /**
     * 获取数据库 一般认为都是初始化过的
     * @param database
     */
    get_database: function (database) {
        return s_mongodb.get_database(database);
    },
    /**
     * 帐号服务器数据库初始化
     * @param configs
     */
    init: function (configs) {
        s_mongodb.on('error', (e) => { s_ready = false; console.log(e); });
        return new Promise(function (resolve, reject) {
            s_mongodb.init(configs, undefined, []).once("ready", function () {
                check().then(() => {
                    s_ready = true;
                    s_mongodb.on('ready', function () {
                        s_ready = true;
                        console.log("mongodb reconnect success");
                    });
                    resolve();
                }).catch(e => {
                    console.log(e);
                    reject();
                });
            });
        });
    }
};
//# sourceMappingURL=index.js.map