"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReHashList = void 0;
const TeMongodb_1 = require("./TeMongodb");
const Util_1 = require("../lib/Util");
const ReHash_1 = require("./ReHash");
class ReHashList {
    constructor(parent, fobj) {
        this.fobj = {};
        this._data_ = [];
        this._start = 0;
        this._limit = 0;
        this.fobj = fobj;
        this._collection_ = parent;
    }
    get findKey() {
        return this.fobj;
    }
    get data() {
        return this._data_;
    }
    /**插入数据单元 */
    push_back(v) {
        v = Util_1.Util.attach(v, this.findKey);
        this._data_.push(v);
    }
    /**插入数据 如果不存在那么新建 如果存在那么更新老数据 */
    push_insert(v) {
        return __awaiter(this, void 0, void 0, function* () {
            if (v._id) {
                let un = new ReHash_1.ReHash(this._collection_, { _id: v._id }, undefined, undefined);
                yield un.load();
                if (un.empty) {
                    un.insert(v);
                }
                else {
                    for (let key in v) {
                        un.set(key, v[key]);
                    }
                }
            }
            else {
                let un = new ReHash_1.ReHash(this._collection_, v, undefined, undefined);
                yield un.load();
                if (un.empty) {
                    un.insert(v);
                }
                else {
                    for (let key in v) {
                        un.set(key, v[key]);
                    }
                }
            }
        });
    }
    limit(num) {
        this._limit = num;
        return this;
    }
    skip(num) {
        this._start = num;
        return this;
    }
    /**
     * @description 加载列表数据
     * @date 2020-03-25
     * @param {*} [filter] 筛选的字段
     * @param {*} [sort] 排序的字段
     * @returns 返回查询对象
     * @memberof ReHashList
     */
    load(filter, sort) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filter && typeof filter == "boolean") {
                filter = sort;
                sort = undefined;
            }
            let _cc_ = this._collection_.find(this.findKey, { projection: filter, skip: this._start, sort: sort });
            let _this = this;
            return new Promise(function (resolve, reject) {
                function batchFind() {
                    _cc_ && _cc_.next((err, result) => {
                        if (err) {
                            TeMongodb_1.error('db load error batchFind', JSON.stringify(err, null, 4));
                            reject(err);
                        }
                        else {
                            if (result == null) {
                                process.nextTick(resolve, _this);
                            }
                            else {
                                let sh = new ReHash_1.ReHash(_this._collection_, { _id: result._id }, undefined, undefined);
                                sh.setObjectID({ _id: result._id }, result);
                                sh.force_ok();
                                _this._data_.push(sh);
                                if (_this._limit && _this._data_.length >= _this._limit) {
                                    process.nextTick(resolve, _this);
                                }
                                else {
                                    process.nextTick(batchFind);
                                }
                            }
                        }
                    });
                }
                process.nextTick(batchFind);
            });
        });
    }
    get length() {
        return this._data_.length;
    }
    get_at(index) {
        if (index < 0 || index >= this._data_.length)
            return null;
        return this._data_[index];
    }
    rm_at(index) {
        let un = this.get_at(index);
        if (un) {
            this._data_.splice(index, 1);
            un.remove();
        }
    }
    clear_all() {
        while (this.length > 0) {
            this.rm_at(0);
        }
    }
}
exports.ReHashList = ReHashList;
//# sourceMappingURL=ReHashList.js.map