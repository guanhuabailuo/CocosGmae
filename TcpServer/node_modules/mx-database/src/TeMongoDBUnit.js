"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeMongoDBUnit = void 0;
const events_1 = require("events");
const ReHash_1 = require("./ReHash");
const ReHashList_1 = require("./ReHashList");
const ReList_1 = require("./ReList");
const TeMongodb_1 = require("./TeMongodb");
class TeMongoDBUnit extends events_1.EventEmitter {
    constructor(db, collections = [], col_indexs) {
        super();
        this.index_check_pool = [];
        this.collections = [];
        this._collect_pool = {};
        this.ready = false;
        this._judge_count = 0;
        this._ct_wait_list = [];
        this._idx_wait_list = [];
        this.db = db;
        this.index_check_pool = col_indexs || [];
        this.collections = collections;
        this.db.collections(this._check_collections.bind(this));
        this.db.on('error', function (...s) {
            TeMongodb_1.error('TeMongoDBUnit', JSON.stringify(s, null, 4));
        });
    }
    check_ready() {
        if (this.ready) {
            setTimeout(this.emit.bind(this, 'ready'), 10);
        }
    }
    _judge_index_finish() {
        if (this._judge_count > 0) {
            return;
        }
        // 都检查完了那么要创建不存在的index了
        // 检查一下要求的是否都在了
        for (var i = 0; i < this.collections.length; i++) {
            var rc = this.collections[i];
            if (rc && !this._collect_pool.hasOwnProperty(rc)) {
                this._ct_wait_list.push(rc);
                this.db.createCollection(rc, this._col_create_ret.bind(this, rc));
            }
        }
        this._create_index();
    }
    _col_create_ret(rc, error, succ) {
        let idx = this._ct_wait_list.indexOf(rc);
        if (idx >= 0) {
            this._ct_wait_list.splice(idx, 1);
        }
        this._create_index();
    }
    _create_index() {
        if (this._ct_wait_list.length != 0)
            return;
        // 表单创建好了，建立索引
        for (let i = 0; i < this.index_check_pool.length; i++) {
            let r = this.index_check_pool[i];
            if (this.collections.indexOf(r.col) >= 0) {
                this._check_index_keys(r);
                let wait_key = r.col + '_' + r.index;
                this._idx_wait_list.push(wait_key);
                this.db.createIndex(r.col, r.keys, r.option || {}, this._col_idx_create_ret.bind(this, wait_key));
            }
        }
        this._init_finish();
    }
    _col_idx_create_ret(ct_str, err, result) {
        let idx = this._idx_wait_list.indexOf(ct_str);
        if (idx >= 0) {
            this._idx_wait_list.splice(idx, 1);
        }
        this._init_finish();
    }
    _check_index_keys(r) {
        if (!r.keys) {
            r.keys = {};
            let arr_keys = r.index.split('_');
            for (let j = 0; j < arr_keys.length; j = j + 2) {
                if (j + 1 >= arr_keys.length) {
                    r.keys[arr_keys[j]] = 1;
                }
                else {
                    let nb = parseInt(arr_keys[j + 1]);
                    if (nb == arr_keys[j + 1]) {
                        r.keys[arr_keys[j]] = nb;
                    }
                    else {
                        r.keys[arr_keys[j]] = arr_keys[j + 1];
                    }
                }
            }
        }
    }
    _judge_index(col, name, objs) {
        let keys = Object.keys(objs);
        for (let i = 0; i < this.index_check_pool.length; i++) {
            let r = this.index_check_pool[i];
            if (r.col != col)
                continue;
            this._check_index_keys(r);
            let same = true;
            for (let j = 0; j < keys.length; j++) {
                if (!r.keys.hasOwnProperty(keys[j])) {
                    same = false;
                    break;
                }
            }
            if (same) {
                this.index_check_pool.splice(i, 1);
                i--;
            }
        }
    }
    /**
     * 检查数据集是否存在
     */
    _check_collections(a, b) {
        if (a) {
            this.emit('error', a);
        }
        else {
            for (var i = 0; i < b.length; i++) {
                var bc = b[i];
                this._collect_pool[bc.collectionName] = true;
                this._judge_count++;
                bc.indexes(((col, error, indexs) => {
                    for (let i = 0; i < indexs.length; i++) {
                        let name = indexs[i].name;
                        /**默认 索引不需要判断 */
                        if (name == '_id_')
                            continue;
                        this._judge_index(col, indexs[i].name, indexs[i].key);
                    }
                    this._judge_count--;
                    this._judge_index_finish();
                }).bind(this, bc.collectionName));
            }
            this._judge_index_finish();
        }
    }
    _init_finish() {
        if (this._ct_wait_list.length != 0 || this._idx_wait_list.length != 0)
            return;
        // 表单和索引都建立好了，那么就完成初始化了
        this.ready = true;
        this.emit('ready');
    }
    get_unit(col_name, fObj = {}, jugetfunc, ...args) {
        return new ReHash_1.ReHash(this.db.collection(col_name), fObj, jugetfunc, args);
    }
    get_sub_unit(col_name, fObj = {}, filter, jugetfunc, ...args) {
        return new ReHash_1.ReSubHash(this.db.collection(col_name), fObj, filter, jugetfunc, args);
    }
    get_list(col_name, fObj = {}, ...args) {
        return new ReList_1.ReList(this.db.collection(col_name), fObj, args);
    }
    get_unit_list(col_name, fObj = {}) {
        return new ReHashList_1.ReHashList(this.db.collection(col_name), fObj);
    }
    /**
     * 直接插入数据，如果_id重复就异常
     * @param col_name
     * @param fObj
     * @param insert_value
     */
    insert(col_name, insert_value) {
        return this.get_collection(col_name).insertOne(insert_value);
    }
    /**
     * 只有不存在的时候才会插入新数据
     * @param col_name
     * @param fObj
     * @param insert_value
     */
    find_insert_unit(col_name, fObj = {}, insert_value) {
        return __awaiter(this, void 0, void 0, function* () {
            let db = this.get_unit(col_name, fObj, undefined);
            let s = yield db.load();
            if (s.empty) {
                yield s.insert(this.merageInfo(insert_value));
            }
            return true;
        });
    }
    update_insert(col_name, fObj = {}, insert_value) {
        return this.update(col_name, fObj, insert_value, true);
    }
    /**合并内容 */
    merageInfo(value) {
        let insert_value = {};
        for (let key in value) {
            let _keys = key.split('.');
            let _obj = insert_value;
            for (let i = 0; i < _keys.length; i++) {
                let __key = _keys[i];
                if (i == _keys.length - 1) {
                    _obj[__key] = value[key];
                }
                else {
                    if (!_obj[__key])
                        _obj[__key] = {};
                    _obj = _obj[__key];
                }
            }
        }
        return insert_value;
    }
    /**
     * 更新数据
     * @param col_name
     * @param fObj
     * @param value
     * @param insert 如果是 false的时候，数据不存在也返回操作成功
     */
    update(col_name, fObj = {}, value, insert = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let db = this.get_unit(col_name, fObj, undefined);
            let s = yield db.load();
            if (s.empty) {
                if (insert) {
                    // 这里应为什么都没有,需要合并对象
                    yield s.insert(this.merageInfo(value));
                }
                return true;
            }
            for (let key in value) {
                if (value[key] != s.get(key)) {
                    s.set(key, value[key]);
                }
            }
            yield s.force_save();
            return true;
        });
    }
    get_collection(table) {
        return this.db.collection(table);
    }
    get_collection_size(dbname, cb) {
        let col = this.db.collection(dbname);
        col.stats((function (_cb, err, res) {
            if (err) {
                _cb('err');
                TeMongodb_1.error(err.toString);
            }
            else {
                _cb(JSON.stringify(res));
            }
        }).bind(this, cb));
    }
    get_aggregate(dbname, pipeline) {
        return new Promise((resolve, reject) => {
            this.db.collection(dbname).aggregate(pipeline, function (err, cur) {
                var outinfos = [];
                function batchFind() {
                    cur.next(function (_err, _res) {
                        if (_err) {
                            process.nextTick(reject, _err);
                        }
                        else {
                            if (_res == null) {
                                process.nextTick(resolve, outinfos);
                            }
                            else {
                                outinfos.push(_res);
                                process.nextTick(batchFind);
                            }
                        }
                    });
                }
                process.nextTick(batchFind);
            });
        });
    }
    /**
     * 检查和跟新存储函数
     * @param func
     */
    check_func(func) {
        let _this = this;
        return new Promise(function (resolve, reject) {
            // 先观察方法是否存在
            let fun_name = func.name;
            let dbscript = `db.system.js.save({'_id':'${fun_name}','value':${func.toString()}})`;
            function onSave() {
                _this.eval(dbscript).then(function (result) {
                    // result.retval = {nInserted:0 nMatched:0 nModified:0 nRemoved:0 nUpserted:1}
                    // 一般都是成功的，这里暂时不处理了
                    resolve();
                }).catch(function (err) {
                    reject(err.errmsg);
                });
            }
            _this.eval(fun_name).then(function (result) {
                if (result.retval && result.retval._bsontype == 'Code' && result.retval.code == func.toString()) {
                    // 达成要求了，不需要再操作了
                    resolve();
                }
                else {
                    // 发送命令
                    onSave();
                }
            }).catch(function (e) {
                onSave();
            });
        });
    }
    call_func(fun_name, ...args) {
        let options = {};
        // if (options['nolock']) {
        //     cmd['nolock'] = options['nolock'];
        // }
        for (let i = 0; i < args.length; i++) {
            if (typeof args[i] == 'string') {
                args[i] = '"' + args[i] + '"';
            }
        }
        return this.eval(`${fun_name}(${args.join(',')})`);
    }
    eval(cmd) {
        return this.db.command({ '$eval': `${cmd}` });
    }
    del(table, fobj) {
        return this.db.collection(table).deleteMany(fobj);
    }
}
exports.TeMongoDBUnit = TeMongoDBUnit;
//# sourceMappingURL=TeMongoDBUnit.js.map